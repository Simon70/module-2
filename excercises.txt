1.5
    a)  String roomNumber
        int seats
    b)	String Title
		String Author
	c)	Float Price
	d)	int Size
		int Weight
	e)	float Weight
		float Speed
		Floor[] Floors
1.6
    public String getRoomNumber() {
        return roomNumber;
    }

    public int getSeats() {
        return seats;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public Float getPrice() {
        return price;
    }

    public int getSize() {
        return size;
    }

1.7
    public void setRoomNumber(String roomNumber) {
        this.roomNumber = roomNumber;
    }

    public void setSeats(int seats) {
        this.seats = seats;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public void setPrice(Float price) {
        this.price = price;
    }

    public void setSize(int size) {
        this.size = size;
    }

    public void setWeight(float weight) {
        this.weight = weight;
    }

    public void setSpeed(float speed) {
        this.speed = speed;
    }

    public float getWeight() {
        return weight;

    }

    public float getSpeed() {
        return speed;
    }

1.8
 (see Video)
 2.4 A lamp instance should always be in exactly one state. This means when it's created it should be in a state and
             when setting the state of the lamp the previous state should be overridden.
       
 P-1.8 4.2
 public Boolean passed(){
 	if(score>=70){
 		return true;
 	}else{
 		return false;
 	}
 	
 	Yes you do.
 }
 
 P-1.9 4.7
See Employee.java

p - 1.11
It does fail because no values are saved. This means getname won't return the right name and getRoom won't return the right room.

<<<<<<< HEAD
P-1.13
information about functions, classes and variables.
For big projects or code that other people will use it will explain what the code will do.
It's also nice for auto completion. 


P - 1.14
Package: java.lang
Constructors: 15
factory methods: 27

P - 1.15 
=======
1.17
    To fill the so there is a known value in the password and the password can be replaced.

1.18
    So the test can check if it is accepted.
>>>>>>> branch 'master' of https://github.com/Simon70/module-2.git

2.2
	because no variables are assigned.
	
2.3
	save a list of points in 2D space. With those points you can calculate any area and perimeter.
	
2.4
	
3.7
You can't activate/change the password anymore.

========
4.2
	Done, checkStyle didn't work though, so not sure if I catched all checkStyle mistakes.
4.3
	Done by Simon, added some JavaDocs.
4.4
	Done by Simon, added a toString method.
4.5
	Done by Simon, added some JavaDocs.
4.6
	Done by Simon, added some JavaDocs.
4.7
	Done by Simon, but did not extend Product 
	(instead implemented Function). Changed Function class 
	to make the func0 and func1 protected instead of private.
	
	Old code is commented out.
4.8
	Done by Simon, added JavaDocs.
	Changed constructor from Double --> int (exercise says we should do that :P)
4.9
	Done. There is no testClass to test this though?
4.10
	
4.11
4.12
4.13
4.14
4.15
4.16
4.17
4.18
4.19
4.20
4.21